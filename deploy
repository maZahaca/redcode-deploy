#!/usr/bin/env php
<?php

$configFile = './deploy.json';
$config = [];
if(file_exists($configFile)) {
    $config = json_decode(file_get_contents($configFile), true);
}

if(!isset($config['path'])) {
    echo "You should set section \"path\" in config\n";
    exit(0);
}

if(!isset($config['path']['local'])) {
    echo "You should set section \"path\".\"local\" in config\n";
    exit(0);
}

if(!isset($config['path']['server'])) {
    echo "You should set section \"path\".\"server\" in config\n";
    exit(0);
}

if(!isset($config['file']) && !isset($config['file']['deploy'])) {
    echo "You should set section \"file\".\"deploy\" in config\n";
    exit(0);
}

if($config['version'] == 'vcs') {
    if(!isset($config['version-strategy'])) {
        $config['version-strategy'] = 'merged';
    }

    $branchExist    = (bool)trim(`git branch`);
    $tagExist       = (bool)trim(`git tag`);

    switch($config['version-strategy']) {
        case 'tag':
            if(!$tagExist) {
                echo "No one tag found\n";
                exit(0);
            }
            $config['version'] = trim(`git describe --abbrev=0`);
            break;
        case 'branch':
            if(!$branchExist) {
                echo "No one branch found\n";
                exit(0);
            }
            $config['version'] = trim(`git branch | sed -n '/\* /s///p'`);
            break;
        default:
            if(!$branchExist && !$tagExist) {
                echo "Git not initialized\n";
                exit(0);
            }

            $config['version'] = trim(`git branch | sed -n '/\* /s///p'`);

            if($tagExist) {
                $tag = `git describe --abbrev=0`;
                if(`git rev-parse --verify HEAD` === `git rev-list {$tag} | head -n 1`) {
                    $config['version'] = $tag;
                }
            }
    }
}

$user = trim(`whoami`);
echo "Enter user for deploy. By default user \"{$user}\": ";
$handle = fopen ("php://stdin","r");
$input = trim(fgets($handle));
if($input) {
    $user = $input;
}

if(!isset($config['environment']) || !count($config['environment'])) {
    echo "You should set section \"environment\" in config\n";
    exit(0);
}

echo "Enter environment for deploy (\"" . implode(array_keys($config['environment']), '", "') . "\"): ";
$handle = fopen ("php://stdin","r");
$input = trim(fgets($handle));

if(!in_array($input, array_keys($config['environment']))) {
    echo "Incorrect environment entered\n";
    exit(0);
}
$env = $input;
$server = $config['environment'][$env]['host'];

echo "Ready to deploy version \"{$config['version']}\". Are you sure you want to continue? (no): ";
$handle = fopen ("php://stdin","r");
$input = trim(fgets($handle));
if(!in_array($input, array('y', 'yes', 'yep', 'yeah'))) {
    exit(0);
}

$buildFileName = "build-{$config['version']}.tgz";
echo "Creating {$config['pack-type']} package ...\n";

$files = $config['file']['deploy'];
$exclude = '--exclude=./build ';
if(isset($config['file']) && isset($config['file']['ignore'])) {
    $excludeArr = explode(' ', $config['file']['ignore']);
    $exclude .= implode(' ', array_map(function ($item) { return "--exclude={$item}";}, $excludeArr));
}

$buildPath = $config['path']['local'] . '/' . 'build/';

`
if [ ! -d $buildPath ]; then
    mkdir $buildPath
fi
`;

`cd {$config['path']['local']} & tar -cvzf {$buildPath}/{$buildFileName} {$exclude} {$files}`;
echo "Package {$buildPath}/{$buildFileName}\n";

`ssh {$user}@{$server} sudo chown {$user}:www-data -R {$config['path']['server']}`;
`scp {$buildPath}/{$buildFileName} {$user}@{$server}:{$config['path']['server']}`;
if(isset($config['commands']) && isset($config['commands']['before'])) {
    foreach($config['commands']['before'] as $command) {
        `ssh {$user}@{$server} {$command}`;
    }
}
`ssh {$user}@{$server} tar -xvzf ./{$buildFileName} >> /dev/null`;
if(isset($config['commands']) && isset($config['commands']['after'])) {
    foreach($config['commands']['after'] as $command) {
        `ssh {$user}@{$server} {$command}`;
    }
}